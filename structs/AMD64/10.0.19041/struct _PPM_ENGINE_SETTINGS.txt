struct _PPM_ENGINE_SETTINGS// Size=0xab0
{
    union _PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];// Offset=0x0 Size=0x10
    unsigned char ThrottlingPolicy;// Offset=0x10 Size=0x1
    unsigned char __align0[3];// Offset=0x11 Size=0x3
    unsigned long PerfTimeCheck;// Offset=0x14 Size=0x4
    unsigned char PerfHistoryCount[2];// Offset=0x18 Size=0x2
    unsigned char PerfMinPolicy[2];// Offset=0x1a Size=0x2
    unsigned char PerfMaxPolicy[2];// Offset=0x1c Size=0x2
    unsigned char PerfDecreaseTime[2];// Offset=0x1e Size=0x2
    unsigned char PerfIncreaseTime[2];// Offset=0x20 Size=0x2
    unsigned char PerfDecreasePolicy[2];// Offset=0x22 Size=0x2
    unsigned char PerfIncreasePolicy[2];// Offset=0x24 Size=0x2
    unsigned char PerfDecreaseThreshold[2];// Offset=0x26 Size=0x2
    unsigned char PerfIncreaseThreshold[2];// Offset=0x28 Size=0x2
    unsigned char __align1[2];// Offset=0x2a Size=0x2
    unsigned long PerfFrequencyCap[2];// Offset=0x2c Size=0x8
    unsigned long PerfBoostPolicy;// Offset=0x34 Size=0x4
    unsigned long PerfBoostMode;// Offset=0x38 Size=0x4
    unsigned long PerfReductionTolerance;// Offset=0x3c Size=0x4
    unsigned long EnergyPerfPreference[2];// Offset=0x40 Size=0x8
    unsigned long AutonomousActivityWindow;// Offset=0x48 Size=0x4
    unsigned char AutonomousPreference;// Offset=0x4c Size=0x1
    unsigned char LatencyHintPerf[2];// Offset=0x4d Size=0x2
    unsigned char LatencyHintUnpark[2];// Offset=0x4f Size=0x2
    unsigned char __align2[3];// Offset=0x51 Size=0x3
    unsigned long ResponsivenessDisableThreshold[2];// Offset=0x54 Size=0x8
    unsigned long ResponsivenessEnableThreshold[2];// Offset=0x5c Size=0x8
    unsigned char ResponsivenessDisableTime[2];// Offset=0x64 Size=0x2
    unsigned char ResponsivenessEnableTime[2];// Offset=0x66 Size=0x2
    unsigned long ResponsivenessEppCeiling[2];// Offset=0x68 Size=0x8
    unsigned long ResponsivenessPerfFloor[2];// Offset=0x70 Size=0x8
    unsigned char DutyCycling;// Offset=0x78 Size=0x1
    unsigned char ParkingPerfState[2];// Offset=0x79 Size=0x2
    unsigned char DistributeUtility;// Offset=0x7b Size=0x1
    unsigned char CoreParkingOverUtilizationThreshold;// Offset=0x7c Size=0x1
    unsigned char CoreParkingConcurrencyThreshold;// Offset=0x7d Size=0x1
    unsigned char CoreParkingHeadroomThreshold;// Offset=0x7e Size=0x1
    unsigned char CoreParkingDistributionThreshold;// Offset=0x7f Size=0x1
    unsigned char CoreParkingDecreasePolicy;// Offset=0x80 Size=0x1
    unsigned char CoreParkingIncreasePolicy;// Offset=0x81 Size=0x1
    unsigned char __align3[2];// Offset=0x82 Size=0x2
    unsigned long CoreParkingDecreaseTime;// Offset=0x84 Size=0x4
    unsigned long CoreParkingIncreaseTime;// Offset=0x88 Size=0x4
    unsigned char CoreParkingMinCores[2];// Offset=0x8c Size=0x2
    unsigned char CoreParkingMaxCores[2];// Offset=0x8e Size=0x2
    unsigned long SoftParkLatency;// Offset=0x90 Size=0x4
    unsigned char AllowScaling;// Offset=0x94 Size=0x1
    unsigned char IdleDisabled;// Offset=0x95 Size=0x1
    unsigned char __align4[2];// Offset=0x96 Size=0x2
    unsigned long IdleTimeCheck;// Offset=0x98 Size=0x4
    unsigned char IdleDemotePercent;// Offset=0x9c Size=0x1
    unsigned char IdlePromotePercent;// Offset=0x9d Size=0x1
    unsigned char IdleStateMax;// Offset=0x9e Size=0x1
    unsigned char HeteroDecreaseTime;// Offset=0x9f Size=0x1
    unsigned char HeteroIncreaseTime;// Offset=0xa0 Size=0x1
    unsigned char HeteroDecreaseThreshold[1280];// Offset=0xa1 Size=0x500
    unsigned char HeteroIncreaseThreshold[1280];// Offset=0x5a1 Size=0x500
    unsigned char Class0FloorPerformance;// Offset=0xaa1 Size=0x1
    unsigned char Class1InitialPerformance;// Offset=0xaa2 Size=0x1
    unsigned char __align5[1];// Offset=0xaa3 Size=0x1
    enum _KHETERO_CPU_POLICY ThreadPolicies[2];// Offset=0xaa4 Size=0x8
};