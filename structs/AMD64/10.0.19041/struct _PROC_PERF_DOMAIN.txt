struct _PROC_PERF_DOMAIN// Size=0x300
{
    struct _LIST_ENTRY Link;// Offset=0x0 Size=0x10
    struct _PROC_PERF_CHECK_CONTEXT * Master;// Offset=0x10 Size=0x8
    struct _KAFFINITY_EX Members;// Offset=0x18 Size=0xa8
    unsigned long long DomainContext;// Offset=0xc0 Size=0x8
    unsigned long ProcessorCount;// Offset=0xc8 Size=0x4
    unsigned char EfficiencyClass;// Offset=0xcc Size=0x1
    unsigned char NominalPerformanceClass;// Offset=0xcd Size=0x1
    unsigned char HighestPerformanceClass;// Offset=0xce Size=0x1
    unsigned char __align0[1];// Offset=0xcf Size=0x1
    enum _PROCESSOR_PRESENCE Presence;// Offset=0xd0 Size=0x4
    unsigned char __align1[4];// Offset=0xd4 Size=0x4
    struct _PROC_PERF_CONSTRAINT * Processors;// Offset=0xd8 Size=0x8
    void  ( * GetFFHThrottleState)(unsigned long long * );// Offset=0xe0 Size=0x8
    void  ( * TimeWindowHandler)(unsigned long long ,unsigned long );// Offset=0xe8 Size=0x8
    void  ( * BoostPolicyHandler)(unsigned long long ,unsigned long );// Offset=0xf0 Size=0x8
    void  ( * BoostModeHandler)(unsigned long long ,unsigned long );// Offset=0xf8 Size=0x8
    void  ( * AutonomousActivityWindowHandler)(unsigned long long ,unsigned long );// Offset=0x100 Size=0x8
    void  ( * AutonomousModeHandler)(unsigned long long ,unsigned long );// Offset=0x108 Size=0x8
    void  ( * ReinitializeHandler)(unsigned long long );// Offset=0x110 Size=0x8
    unsigned long  ( * PerfSelectionHandler)(unsigned long long ,unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long * ,unsigned long long * );// Offset=0x118 Size=0x8
    void  ( * PerfControlHandler)(unsigned long long ,struct _PERF_CONTROL_STATE_SELECTION * ,unsigned char ,unsigned char );// Offset=0x120 Size=0x8
    void  ( * PerfControlHandlerHidden)(unsigned long long ,struct _PERF_CONTROL_STATE_SELECTION * ,unsigned char ,unsigned char );// Offset=0x128 Size=0x8
    void  ( * DomainPerfControlHandler)(unsigned long long ,struct _PERF_CONTROL_STATE_SELECTION * ,unsigned char ,unsigned char );// Offset=0x130 Size=0x8
    unsigned long MaxFrequency;// Offset=0x138 Size=0x4
    unsigned long NominalFrequency;// Offset=0x13c Size=0x4
    unsigned long MaxPercent;// Offset=0x140 Size=0x4
    unsigned long MinPerfPercent;// Offset=0x144 Size=0x4
    unsigned long MinThrottlePercent;// Offset=0x148 Size=0x4
    unsigned long AdvertizedMaximumFrequency;// Offset=0x14c Size=0x4
    unsigned long long MinimumRelativePerformance;// Offset=0x150 Size=0x8
    unsigned long long NominalRelativePerformance;// Offset=0x158 Size=0x8
    unsigned char NominalRelativePerformancePercent;// Offset=0x160 Size=0x1
    unsigned char Coordination;// Offset=0x161 Size=0x1
    unsigned char HardPlatformCap;// Offset=0x162 Size=0x1
    unsigned char AffinitizeControl;// Offset=0x163 Size=0x1
    unsigned char EfficientThrottle;// Offset=0x164 Size=0x1
    unsigned char AllowSchedulerDirectedPerfStates;// Offset=0x165 Size=0x1
    unsigned char InitiateAllProcessors;// Offset=0x166 Size=0x1
    unsigned char AutonomousMode;// Offset=0x167 Size=0x1
    unsigned char ProvideGuidance;// Offset=0x168 Size=0x1
    unsigned char __align2[3];// Offset=0x169 Size=0x3
    unsigned long DesiredPercent;// Offset=0x16c Size=0x4
    unsigned long GuaranteedPercent;// Offset=0x170 Size=0x4
    unsigned char EngageResponsivenessOverrides;// Offset=0x174 Size=0x1
    unsigned char __align3[3];// Offset=0x175 Size=0x3
    struct _PROC_PERF_QOS_CLASS_POLICY QosPolicies[5];// Offset=0x178 Size=0x8c
    unsigned long QosDisableReasons[5];// Offset=0x204 Size=0x14
    unsigned short QosEquivalencyMasks[5];// Offset=0x218 Size=0xa
    unsigned char QosSupported;// Offset=0x222 Size=0x1
    unsigned char __align4[1];// Offset=0x223 Size=0x1
    unsigned long SelectionGeneration;// Offset=0x224 Size=0x4
    struct _PERF_CONTROL_STATE_SELECTION QosSelection[5];// Offset=0x228 Size=0xc8
    unsigned long long PerfChangeTime;// Offset=0x2f0 Size=0x8
    unsigned long PerfChangeIntervalCount;// Offset=0x2f8 Size=0x4
    unsigned char Force;// Offset=0x2fc Size=0x1
    unsigned char Update;// Offset=0x2fd Size=0x1
    unsigned char Apply;// Offset=0x2fe Size=0x1
};