struct _PROC_PERF_DOMAIN// Size=0x180
{
    struct _LIST_ENTRY Link;// Offset=0x0 Size=0x8
    struct _KPRCB * Master;// Offset=0x8 Size=0x4
    struct _KAFFINITY_EX Members;// Offset=0xc Size=0xc
    unsigned long DomainContext;// Offset=0x18 Size=0x4
    unsigned long ProcessorCount;// Offset=0x1c Size=0x4
    unsigned char EfficiencyClass;// Offset=0x20 Size=0x1
    unsigned char NominalPerformanceClass;// Offset=0x21 Size=0x1
    unsigned char HighestPerformanceClass;// Offset=0x22 Size=0x1
    unsigned char Spare;// Offset=0x23 Size=0x1
    struct _PROC_PERF_CONSTRAINT * Processors;// Offset=0x24 Size=0x4
    void  ( * GetFFHThrottleState)(unsigned long long * );// Offset=0x28 Size=0x4
    void  ( * TimeWindowHandler)(unsigned long ,unsigned long );// Offset=0x2c Size=0x4
    void  ( * BoostPolicyHandler)(unsigned long ,unsigned long );// Offset=0x30 Size=0x4
    void  ( * BoostModeHandler)(unsigned long ,unsigned long );// Offset=0x34 Size=0x4
    void  ( * EnergyPerfPreferenceHandler)(unsigned long ,unsigned long );// Offset=0x38 Size=0x4
    void  ( * AutonomousActivityWindowHandler)(unsigned long ,unsigned long );// Offset=0x3c Size=0x4
    void  ( * AutonomousModeHandler)(unsigned long ,unsigned long );// Offset=0x40 Size=0x4
    void  ( * ReinitializeHandler)(unsigned long );// Offset=0x44 Size=0x4
    unsigned long  ( * PerfSelectionHandler)(unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long ,unsigned long * ,unsigned long long * );// Offset=0x48 Size=0x4
    void  ( * PerfControlHandler)(unsigned long ,struct _PERF_CONTROL_STATE_SELECTION * ,unsigned char ,unsigned char );// Offset=0x4c Size=0x4
    void  ( * DomainPerfControlHandler)(unsigned long ,struct _PERF_CONTROL_STATE_SELECTION * ,unsigned char ,unsigned char );// Offset=0x50 Size=0x4
    unsigned long MaxFrequency;// Offset=0x54 Size=0x4
    unsigned long NominalFrequency;// Offset=0x58 Size=0x4
    unsigned long MaxPercent;// Offset=0x5c Size=0x4
    unsigned long MinPerfPercent;// Offset=0x60 Size=0x4
    unsigned long MinThrottlePercent;// Offset=0x64 Size=0x4
    unsigned long long MinimumRelativePerformance;// Offset=0x68 Size=0x8
    unsigned long long NominalRelativePerformance;// Offset=0x70 Size=0x8
    unsigned char NominalRelativePerformancePercent;// Offset=0x78 Size=0x1
    unsigned char Coordination;// Offset=0x79 Size=0x1
    unsigned char HardPlatformCap;// Offset=0x7a Size=0x1
    unsigned char AffinitizeControl;// Offset=0x7b Size=0x1
    unsigned char EfficientThrottle;// Offset=0x7c Size=0x1
    unsigned char AllowSchedulerDirectedPerfStates;// Offset=0x7d Size=0x1
    unsigned char InitiateAllProcessors;// Offset=0x7e Size=0x1
    unsigned char AutonomousMode;// Offset=0x7f Size=0x1
    unsigned char ProvideGuidance;// Offset=0x80 Size=0x1
    unsigned char __align0[3];// Offset=0x81 Size=0x3
    unsigned long DesiredPercent;// Offset=0x84 Size=0x4
    unsigned long GuaranteedPercent;// Offset=0x88 Size=0x4
    struct _PROC_PERF_QOS_CLASS_POLICY QosPolicies[3];// Offset=0x8c Size=0x48
    unsigned long QosDisableReasons[3];// Offset=0xd4 Size=0xc
    unsigned long QosEquivalencyMasks[3];// Offset=0xe0 Size=0xc
    unsigned char QosSupported;// Offset=0xec Size=0x1
    unsigned char __align1[3];// Offset=0xed Size=0x3
    unsigned long SelectionGeneration;// Offset=0xf0 Size=0x4
    unsigned char __align2[4];// Offset=0xf4 Size=0x4
    struct _PERF_CONTROL_STATE_SELECTION QosSelection[3];// Offset=0xf8 Size=0x78
    unsigned long long PerfChangeTime;// Offset=0x170 Size=0x8
    unsigned long PerfChangeIntervalCount;// Offset=0x178 Size=0x4
    unsigned char Force;// Offset=0x17c Size=0x1
};