struct _MI_SECTION_STATE// Size=0x140
{
    long SectionObjectPointersLock;// Offset=0x0 Size=0x4
    struct _EX_PUSH_LOCK SectionExtendLock;// Offset=0x4 Size=0x4
    struct _EX_PUSH_LOCK SectionExtendSetLock;// Offset=0x8 Size=0x4
    struct _RTL_AVL_TREE SectionBasedRoot;// Offset=0xc Size=0x4
    struct _EX_PUSH_LOCK SectionBasedLock;// Offset=0x10 Size=0x4
    unsigned long UnusedSubsectionPagedPool;// Offset=0x14 Size=0x4
    unsigned long UnusedSegmentForceFree;// Offset=0x18 Size=0x4
    unsigned long DataSectionProtectionMask;// Offset=0x1c Size=0x4
    void * HighSectionBase;// Offset=0x20 Size=0x4
    struct _MSUBSECTION PhysicalSubsection;// Offset=0x24 Size=0x44
    struct _CONTROL_AREA PhysicalControlArea;// Offset=0x68 Size=0x50
    struct _MMPFN * DanglingExtentsPages;// Offset=0xb8 Size=0x4
    long DanglingExtentsLock;// Offset=0xbc Size=0x4
    struct _WORK_QUEUE_ITEM DanglingExtentsWorkItem;// Offset=0xc0 Size=0x10
    unsigned char DanglingExtentsWorkerActive;// Offset=0xd0 Size=0x1
    unsigned char __align0[3];// Offset=0xd1 Size=0x3
    struct _RTL_AVL_TREE PageFileSectionHead;// Offset=0xd4 Size=0x4
    long PageFileSectionListSpinLock;// Offset=0xd8 Size=0x4
    unsigned long ImageBias;// Offset=0xdc Size=0x4
    struct _EX_PUSH_LOCK RelocateBitmapsLock;// Offset=0xe0 Size=0x4
    struct _RTL_BITMAP ImageBitMap;// Offset=0xe4 Size=0x8
    void * ApiSetSection;// Offset=0xec Size=0x4
    void * ApiSetSchema;// Offset=0xf0 Size=0x4
    unsigned long ApiSetSchemaSize;// Offset=0xf4 Size=0x4
    unsigned long LostDataFiles;// Offset=0xf8 Size=0x4
    unsigned long LostDataPages;// Offset=0xfc Size=0x4
    unsigned long ImageFailureReason;// Offset=0x100 Size=0x4
    struct _SECTION * CfgBitMapSection32;// Offset=0x104 Size=0x4
    struct _CONTROL_AREA * CfgBitMapControlArea32;// Offset=0x108 Size=0x4
    unsigned long ImageCfgFailure;// Offset=0x10c Size=0x4
    long ImageValidationFailed;// Offset=0x110 Size=0x4
};